# Cursor IDE Guidelines for CheQQme Data Center Project

## Playwright MCP Server Integration

### Installation & Configuration

-   **Server**: Playwright MCP server is installed globally via `npm install -g @playwright/mcp`
-   **Command**: Use `npx @playwright/mcp` to run the server
-   **Configuration**: Add to Cursor Settings > MCP > Add new MCP Server:
    -   Name: "playwright"
    -   Command: `npx @playwright/mcp`

### Efficient Playwright MCP Usage

#### Browser Automation Tasks

When working with browser automation, use Playwright MCP for:

-   **Web scraping**: Extract data from websites, APIs, or web services
-   **E2E testing**: Automate user interactions for testing workflows
-   **UI validation**: Verify that web interfaces work correctly
-   **Data collection**: Gather information from external sources
-   **Form automation**: Fill out forms, submit data programmatically
-   **Screenshot capture**: Take screenshots of web pages or specific elements
-   **PDF generation**: Convert web pages to PDF documents

#### Best Practices

1. **Start with headless mode** for faster execution: `--headless`
2. **Use specific timeouts** to avoid hanging: `--timeout-action 5000 --timeout-navigation 60000`
3. **Save sessions** for debugging: `--save-session --output-dir ./playwright-sessions`
4. **Use isolated sessions** for testing: `--isolated`
5. **Specify viewport size** for consistent rendering: `--viewport-size "1280,720"`

#### Common Use Cases for This Project

-   **Trello integration**: Automate Trello board interactions for task management
-   **Client data collection**: Scrape client information from various sources
-   **Document processing**: Convert web-based documents to PDF
-   **API testing**: Verify external API endpoints and responses
-   **Dashboard validation**: Ensure Filament admin panels work correctly
-   **User workflow testing**: Test complete user journeys through the application

#### Command Examples

```bash
# Basic headless browser automation
npx @playwright/mcp --headless --timeout-action 5000

# With session saving for debugging
npx @playwright/mcp --save-session --output-dir ./sessions

# With specific browser and viewport
npx @playwright/mcp --browser chrome --viewport-size "1920,1080"

# With device emulation for mobile testing
npx @playwright/mcp --device "iPhone 15"
```

## Laravel Development

See `.cursor/rules/laravel-conventions.mdc` and `.cursor/rules/coding-standards.mdc` for detailed guidelines.

**Key Points:**

-   Always use `--no-interaction` with Artisan commands
-   Run `vendor/bin/pint --dirty` after code changes
-   Use Form Requests for validation
-   Prefer Eloquent relationships over raw queries
-   Use Laravel Boost tools for debugging and documentation

## Laravel Boost + Playwright MCP Integration

### Combined Workflow

When debugging issues that span both backend and frontend:

1. **Use Laravel Boost first** for backend investigation:

    - Check logs with `mcp_laravel-boost_read-log-entries`
    - Query database with `mcp_laravel-boost_database-query`
    - Test PHP code with `mcp_laravel-boost_tinker`

2. **Use Playwright MCP for frontend validation**:
    - Test UI interactions and workflows
    - Validate form submissions and data display
    - Screenshot capture for visual debugging
    - E2E testing of complete user journeys

### Best Practices

1. Start with Laravel Boost for backend investigation
2. Use Playwright MCP to reproduce and validate frontend issues
3. Combine both tools for comprehensive E2E testing
4. Use Playwright MCP for automated testing of Laravel Boost findings

## Documentation

-   Use `mcp_laravel-boost_search-docs` for Laravel ecosystem docs
-   Always use version-specific documentation
-   See `.cursor/rules/laravel-boost.mdc` for detailed Boost usage
